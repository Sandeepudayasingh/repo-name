package com.scraper;

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class WebScraper {
    
    public static WebDriver setupDriver() {
    	System.setProperty("webdriver.chrome.driver","C:\\selenium Webdriver\\chrome driver\\chromedriver-win64\\chromedriver.exe");
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless");
        return new ChromeDriver(options);
    }
    
    public static List<Map<String, String>> scrapeArticles(WebDriver driver) throws InterruptedException {
        driver.get("https://elpais.com");
        Thread.sleep(3000);  // Ensure page loads completely

        // Find the Opinion section link dynamically
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        WebElement opinionLink = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//a[contains(text(), 'Opinión')])[2]")));
        opinionLink.click();


        List<Map<String, String>> articleData = new ArrayList<>();

        List<WebElement> articles = driver.findElements(By.cssSelector("article"));

        for (int i = 0; i < Math.min(5, articles.size()); i++) {
            try {
                // Re-locate the article elements before interaction to avoid StaleElementReferenceException
                articles = driver.findElements(By.cssSelector("article"));
                WebElement article = articles.get(i);
                WebElement titleElement = article.findElement(By.tagName("h2"));
                String title = titleElement.getText();

                WebElement linkElement = article.findElement(By.tagName("a"));
                String articleUrl = linkElement.getAttribute("href");

                driver.get(articleUrl);
                Thread.sleep(3000); // Ensure article loads fully
                
                JavascriptExecutor js = (JavascriptExecutor) driver;
                js.executeScript("document.querySelectorAll('div, iframe, modal, overlay').forEach(el => el.remove());");
                
                /*try {
                    // Wait for the popup to appear
                    WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(5));
                    WebElement closeButton = wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[contains(text(), 'Permitir anuncios en EL PAÍS')]")));

                    // Click to close the popup
                    closeButton.click();
                    System.out.println("Popup closed successfully.");
                } catch (Exception e) {
                    System.out.println("No popup detected or unable to close.");
                } */

                // Use Jsoup to extract article content
                Document doc = Jsoup.parse(driver.getPageSource());
                Elements paragraphs = doc.select("p");
                StringBuilder content = new StringBuilder();
                for (Element p : paragraphs) {
                    content.append(p.text()).append(" ");
                }

                // Extract image URL
                Element imgTag = doc.selectFirst("img");
                String imgUrl = (imgTag != null) ? imgTag.attr("src") : null;

                // Store article details
                Map<String, String> articleInfo = new HashMap<>();
                articleInfo.put("title", title);
                articleInfo.put("content", content.toString());
                articleInfo.put("imgUrl", imgUrl);

                articleData.add(articleInfo);

                driver.navigate().back();
                Thread.sleep(3000); // Ensure page loads after navigating back
            } catch (StaleElementReferenceException e) {
                System.out.println("Encountered StaleElementReferenceException. Retrying...");
                i--; // Retry the same index
            }
        }
        return articleData;
    }

    
    public static void downloadImages(List<Map<String, String>> articleData) {
        File dir = new File("images");
        if (!dir.exists()) dir.mkdir();
        
        for (int i = 0; i < articleData.size(); i++) {
            String imgUrl = articleData.get(i).get("imgUrl");
            if (imgUrl != null) {
                try {
                    URL url = new URL(imgUrl);
                    InputStream in = url.openStream();
                    Files.copy(in, Paths.get("images/article_" + (i + 1) + ".jpg"));
                    in.close();
                } catch (Exception e) {
                    System.out.println("Failed to download image: " + e.getMessage());
                }
            }
        }
    }
    
    public static List<String> translateTitles(List<Map<String, String>> articleData) throws Exception {
        List<String> translatedTitles = new ArrayList<>();
        String apiUrl = "https://libretranslate.com/translate";
        
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            for (Map<String, String> article : articleData) {
                String title = article.get("title");
                
                String jsonBody = "{" +
                        "\"q\": \"" + title + "\"," +
                        "\"source\": \"es\"," +
                        "\"target\": \"en\"," +
                        "\"format\": \"text\"}";
                
                HttpPost request = new HttpPost(apiUrl);
                request.setHeader("Content-Type", "application/json");
                request.setEntity(new StringEntity(jsonBody));
                
                try (CloseableHttpResponse response = client.execute(request)) {
                    String responseString = EntityUtils.toString(response.getEntity());
                    System.out.println("Translation API Response: " + responseString);
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode jsonResponse = mapper.readTree(responseString);
                    if (jsonResponse.has("translatedText")) {
                        translatedTitles.add(jsonResponse.get("translatedText").asText());
                    } else {
                        System.out.println("Warning: 'translatedText' not found in response");
                    }
                }
            }
        }
        return translatedTitles;
    }
    
    public static Map<String, Integer> analyzeTitles(List<String> translatedTitles) {
        Map<String, Integer> wordCount = new HashMap<>();
        for (String title : translatedTitles) {
            String[] words = title.split(" ");
            for (String word : words) {
                wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
            }
        }
        wordCount.values().removeIf(count -> count <= 2);
        return wordCount;
    }
    
    public static void main(String[] args) throws Exception {
        WebDriver driver = setupDriver();
        List<Map<String, String>> articles = scrapeArticles(driver);
        downloadImages(articles);
        List<String> translatedTitles = translateTitles(articles);
        Map<String, Integer> wordAnalysis = analyzeTitles(translatedTitles);
        driver.quit();
        
        System.out.println("Translated Titles:");
        for (String title : translatedTitles) {
            System.out.println(title);
        }
        
        System.out.println("\nRepeated Words:");
        wordAnalysis.forEach((word, count) -> System.out.println(word + ": " + count));
    }
}

