package com.scraper;

import org.openqa.selenium.*;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.*;
import org.testng.annotations.Optional;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.ParseException;

public class BrowserStackTest {
    public static final String USERNAME = "sandeepudayasing_zbn2dp";
    public static final String ACCESS_KEY = "9JdfVBNuyzzxSwHbySx8";
    public static final String BROWSERSTACK_URL = "https://" + USERNAME + ":" + ACCESS_KEY + "@hub-cloud.browserstack.com/wd/hub";
    private WebDriver driver;
    
    @Parameters({"browser", "os", "os_version", "device", "real_mobile"})
    @BeforeTest
    public void setupDriver(@Optional("") String browser, @Optional("") String os, 
                            @Optional("") String os_version, @Optional("") String device, 
                            @Optional("") String real_mobile) throws MalformedURLException {
        DesiredCapabilities caps = new DesiredCapabilities();
        if (!device.isEmpty()) {
            caps.setCapability("device", device);
            caps.setCapability("real_mobile", real_mobile);
            caps.setCapability("os_version", os_version);
            caps.setCapability("browserName", browser);
        } else {
            caps.setCapability("browserName", browser);
            caps.setCapability("os", os);
            caps.setCapability("os_version", os_version);
        }
        caps.setCapability("name", "Web Scraper Parallel Test");
        driver = new RemoteWebDriver(new URL(BROWSERSTACK_URL), caps);
    }

    @Test
    public void testScrapeArticles() throws InterruptedException {
        driver.get("https://elpais.com");
        driver.manage().window().maximize();
        Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        
        try {
            WebElement popupButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//button[contains(@aria-label, 'Agree and close')]")));
            popupButton.click();
        } catch (Exception e) {
            System.out.println("No popup detected or unable to close.");
        }

        WebElement opinionLink = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//a[contains(text(), 'Opini√≥n')])[2]")));
        opinionLink.click();
        
        List<WebElement> articles = driver.findElements(By.cssSelector("article"));
        List<Map<String, String>> articleData = new ArrayList<>();
        
        for (int i = 0; i < Math.min(5, articles.size()); i++) {
            try {
                articles = driver.findElements(By.cssSelector("article"));
                WebElement article = articles.get(i);
                String title = article.findElement(By.tagName("h2")).getText();
                String articleUrl = article.findElement(By.tagName("a")).getAttribute("href");
                driver.get(articleUrl);
                Thread.sleep(3000);
                Document doc = Jsoup.parse(driver.getPageSource());
                Elements paragraphs = doc.select("article p");
                StringBuilder content = new StringBuilder();
                for (Element p : paragraphs) {
                    content.append(p.text()).append(" ");
                }
                Map<String, String> articleInfo = new HashMap<>();
                articleInfo.put("title", title);
                articleInfo.put("content", content.toString());
                articleData.add(articleInfo);
                driver.navigate().back();
                Thread.sleep(3000);
            } catch (StaleElementReferenceException e) {
                System.out.println("Encountered StaleElementReferenceException. Retrying...");
                i--;
            }
        }
    }

    @AfterTest
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}
